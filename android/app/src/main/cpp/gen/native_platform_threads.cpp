// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#include "native_platform_threads.hpp"  // my header
#include "Marshal.hpp"
#include "native_thread_func.hpp"

namespace djinni_generated {

NativePlatformThreads::NativePlatformThreads() : ::djinni::JniInterface<::xptuto::PlatformThreads, NativePlatformThreads>("org/example/xptuto/PlatformThreads$CppProxy") {}

NativePlatformThreads::~NativePlatformThreads() = default;

NativePlatformThreads::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativePlatformThreads::JavaProxy::~JavaProxy() = default;

void NativePlatformThreads::JavaProxy::create_thread(const std::string & c_name, const std::shared_ptr<::xptuto::ThreadFunc> & c_func) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformThreads>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_createThread,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                           ::djinni::get(::djinni_generated::NativeThreadFunc::fromCpp(jniEnv, c_func)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativePlatformThreads::JavaProxy::run_on_main_thread(const std::shared_ptr<::xptuto::ThreadFunc> & c_func) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformThreads>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_runOnMainThread,
                           ::djinni::get(::djinni_generated::NativeThreadFunc::fromCpp(jniEnv, c_func)));
    ::djinni::jniExceptionCheck(jniEnv);
}
bool NativePlatformThreads::JavaProxy::is_main_thread() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePlatformThreads>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isMainThread);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_org_example_xptuto_PlatformThreads_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::xptuto::PlatformThreads>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_org_example_xptuto_PlatformThreads_00024CppProxy_native_1createThread(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name, jobject j_func)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::xptuto::PlatformThreads>(nativeRef);
        ref->create_thread(::djinni::String::toCpp(jniEnv, j_name),
                           ::djinni_generated::NativeThreadFunc::toCpp(jniEnv, j_func));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_org_example_xptuto_PlatformThreads_00024CppProxy_native_1runOnMainThread(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_func)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::xptuto::PlatformThreads>(nativeRef);
        ref->run_on_main_thread(::djinni_generated::NativeThreadFunc::toCpp(jniEnv, j_func));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_org_example_xptuto_PlatformThreads_00024CppProxy_native_1isMainThread(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::xptuto::PlatformThreads>(nativeRef);
        auto r = ref->is_main_thread();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
