// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#pragma once

#include "djinni_support.hpp"
#include "http_client.hpp"

namespace djinni_generated {

class NativeHttpClient final : ::djinni::JniInterface<::xptuto::HttpClient, NativeHttpClient> {
public:
    using CppType = std::shared_ptr<::xptuto::HttpClient>;
    using CppOptType = std::shared_ptr<::xptuto::HttpClient>;
    using JniType = jobject;

    using Boxed = NativeHttpClient;

    ~NativeHttpClient();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeHttpClient>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeHttpClient>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeHttpClient();
    friend ::djinni::JniClass<NativeHttpClient>;
    friend ::djinni::JniInterface<::xptuto::HttpClient, NativeHttpClient>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::xptuto::HttpClient
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void get(const std::string & url, const std::shared_ptr<::xptuto::HttpCallback> & callback) override;

    private:
        friend ::djinni::JniInterface<::xptuto::HttpClient, ::djinni_generated::NativeHttpClient>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("org/example/xptuto/HttpClient") };
    const jmethodID method_get { ::djinni::jniGetMethodID(clazz.get(), "get", "(Ljava/lang/String;Lorg/example/xptuto/HttpCallback;)V") };
};

}  // namespace djinni_generated
