// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#pragma once

#include "djinni_support.hpp"
#include "platform_threads.hpp"

namespace djinni_generated {

class NativePlatformThreads final : ::djinni::JniInterface<::xptuto::PlatformThreads, NativePlatformThreads> {
public:
    using CppType = std::shared_ptr<::xptuto::PlatformThreads>;
    using CppOptType = std::shared_ptr<::xptuto::PlatformThreads>;
    using JniType = jobject;

    using Boxed = NativePlatformThreads;

    ~NativePlatformThreads();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativePlatformThreads>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativePlatformThreads>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativePlatformThreads();
    friend ::djinni::JniClass<NativePlatformThreads>;
    friend ::djinni::JniInterface<::xptuto::PlatformThreads, NativePlatformThreads>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::xptuto::PlatformThreads
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void create_thread(const std::string & name, const std::shared_ptr<::xptuto::ThreadFunc> & func) override;
        void run_on_main_thread(const std::shared_ptr<::xptuto::ThreadFunc> & func) override;
        bool is_main_thread() override;

    private:
        friend ::djinni::JniInterface<::xptuto::PlatformThreads, ::djinni_generated::NativePlatformThreads>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("org/example/xptuto/PlatformThreads") };
    const jmethodID method_createThread { ::djinni::jniGetMethodID(clazz.get(), "createThread", "(Ljava/lang/String;Lorg/example/xptuto/ThreadFunc;)V") };
    const jmethodID method_runOnMainThread { ::djinni::jniGetMethodID(clazz.get(), "runOnMainThread", "(Lorg/example/xptuto/ThreadFunc;)V") };
    const jmethodID method_isMainThread { ::djinni::jniGetMethodID(clazz.get(), "isMainThread", "()Z") };
};

}  // namespace djinni_generated
